{"name":"Sample web project","tagline":"How to integrate log4j2 library in a Java web application","body":"### Get the required jar files\r\nFor a simple Java web application you would need following two jar files:\r\n* log4j-api-2.5.jar \r\n* log4j-core-2.5.jar\r\n\r\nI have used log4j2 version 2.5 which is latest available at this date. The files can be downloaded from Apache site http://logging.apache.org/log4j/2.x/download.html. Once you unzip the downloaded file it would contain many more jars but they would be required for specific cases. For a simple java web application the above two would suffice. If you are using Maven, add the required artifacts. \r\n\r\n### Add the jars to your project\r\nIf you are using Eclipse put the jar files in <root>/WEB-INF/lib directory or add the jars in project's classpath.\r\n\r\n### log4j2 configuration\r\nlog4j2 needs to be configured. You can either use a configuration file or define runtime configuration. We will use a configuration file here. The file should be named as log4j2.xml and should be kept in <root>WEB-INF/classes directory. Following is a sample log4j2.xml file:\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration status=\"WARN\">\r\n  <appenders>\r\n    <Console name=\"Console\" target=\"SYSTEM_OUT\">\r\n      <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\r\n    </Console>\r\n\r\n    <File name=\"MyFile\" fileName=\"/logs/app.log\">\r\n        <PatternLayout pattern=\"%d{yyyy-mm-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\r\n    </File>             \r\n  </appenders>\r\n\r\n  <loggers>     \r\n    <root level=\"debug\">\r\n      <appender-ref ref=\"Console\" level=\"info\"/>\r\n       <appender-ref ref=\"MyFile\" level=\"info\"/>\r\n    </root>    \r\n  </loggers>\r\n</configuration>  \r\n```\r\nNotice the fileName which refers to the file in which logs would be written. Make sure that required permissions are given for this file.\r\n\r\n### Configuration in web.xml (not mandatory, but can be useful)\r\nAdd the following in web.xml file\r\n```\r\n<context-param>\r\n        <param-name>log4jConfiguration</param-name>\r\n        <param-value>/WEB-INF/classes/log4j2.xml</param-value>\r\n    </context-param>\r\n```\r\n### Use the logger class\r\nNow you should be able to use log4j2. \r\nImport the following in your class\r\n```\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n```\r\nGet instance of logger\r\n```\r\nprivate static final Logger logger = LogManager.getLogger(\"YOUR_CLASS_NAME\");\r\n```\r\nAnd use different methods based on situation:\r\n```\r\nlogger.info(\"Entered in doGet method\");\r\nlogger.error(\"Could not close db connection.\");\r\n```\r\n\r\nThat's it. Thanks for reading. Suggestions are most welcome!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}